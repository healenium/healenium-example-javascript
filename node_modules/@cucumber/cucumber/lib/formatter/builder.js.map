{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/formatter/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import getColorFns from './get_color_fns'\nimport JavascriptSnippetSyntax from './step_definition_snippet_builder/javascript_snippet_syntax'\nimport path from 'path'\nimport StepDefinitionSnippetBuilder from './step_definition_snippet_builder'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport Formatter, { IFormatterCleanupFn, IFormatterLogFn } from '.'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { EventEmitter } from 'events'\nimport EventDataCollector from './helpers/event_data_collector'\nimport { Writable as WritableStream } from 'stream'\nimport { IParsedArgvFormatOptions } from '../cli/argv_parser'\nimport { SnippetInterface } from './step_definition_snippet_builder/snippet_syntax'\nimport { pathToFileURL } from 'url'\nimport Formatters from './helpers/formatters'\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { importer } = require('../importer')\n\ninterface IGetStepDefinitionSnippetBuilderOptions {\n  cwd: string\n  snippetInterface?: SnippetInterface\n  snippetSyntax?: string\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport interface IBuildOptions {\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  log: IFormatterLogFn\n  parsedArgvOptions: IParsedArgvFormatOptions\n  stream: WritableStream\n  cleanup: IFormatterCleanupFn\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nconst FormatterBuilder = {\n  async build(type: string, options: IBuildOptions): Promise<Formatter> {\n    const FormatterConstructor = await FormatterBuilder.getConstructorByType(\n      type,\n      options.cwd\n    )\n    const colorFns = getColorFns(options.parsedArgvOptions.colorsEnabled)\n    const snippetBuilder =\n      await FormatterBuilder.getStepDefinitionSnippetBuilder({\n        cwd: options.cwd,\n        snippetInterface: options.parsedArgvOptions.snippetInterface,\n        snippetSyntax: options.parsedArgvOptions.snippetSyntax,\n        supportCodeLibrary: options.supportCodeLibrary,\n      })\n    return new FormatterConstructor({\n      colorFns,\n      snippetBuilder,\n      ...options,\n    })\n  },\n\n  async getConstructorByType(\n    type: string,\n    cwd: string\n  ): Promise<typeof Formatter> {\n    const formatters: Record<string, typeof Formatter> =\n      Formatters.getFormatters()\n\n    return formatters[type]\n      ? formatters[type]\n      : await FormatterBuilder.loadCustomClass('formatter', type, cwd)\n  },\n\n  async getStepDefinitionSnippetBuilder({\n    cwd,\n    snippetInterface,\n    snippetSyntax,\n    supportCodeLibrary,\n  }: IGetStepDefinitionSnippetBuilderOptions) {\n    if (doesNotHaveValue(snippetInterface)) {\n      snippetInterface = SnippetInterface.Synchronous\n    }\n    let Syntax = JavascriptSnippetSyntax\n    if (doesHaveValue(snippetSyntax)) {\n      Syntax = await FormatterBuilder.loadCustomClass(\n        'syntax',\n        snippetSyntax,\n        cwd\n      )\n    }\n    return new StepDefinitionSnippetBuilder({\n      snippetSyntax: new Syntax(snippetInterface),\n      parameterTypeRegistry: supportCodeLibrary.parameterTypeRegistry,\n    })\n  },\n\n  async loadCustomClass(\n    type: 'formatter' | 'syntax',\n    descriptor: string,\n    cwd: string\n  ) {\n    let CustomClass = descriptor.startsWith(`.`)\n      ? await importer(pathToFileURL(path.resolve(cwd, descriptor)))\n      : await importer(descriptor)\n    CustomClass = FormatterBuilder.resolveConstructor(CustomClass)\n    if (doesHaveValue(CustomClass)) {\n      return CustomClass\n    } else {\n      throw new Error(\n        `Custom ${type} (${descriptor}) does not export a function/class`\n      )\n    }\n  },\n\n  resolveConstructor(ImportedCode: any) {\n    if (typeof ImportedCode === 'function') {\n      return ImportedCode\n    } else if (\n      doesHaveValue(ImportedCode) &&\n      typeof ImportedCode.default === 'function'\n    ) {\n      return ImportedCode.default\n    }\n    return null\n  },\n}\n\nexport default FormatterBuilder\n"]}