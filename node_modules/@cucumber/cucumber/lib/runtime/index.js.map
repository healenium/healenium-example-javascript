{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/runtime/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventDataCollector, formatLocation } from '../formatter/helpers'\nimport StackTraceFilter from '../stack_trace_filter'\nimport UserCodeRunner from '../user_code_runner'\nimport VError from 'verror'\nimport { retriesForPickle, shouldCauseFailure } from './helpers'\nimport { IdGenerator } from '@cucumber/messages'\nimport * as messages from '@cucumber/messages'\nimport TestCaseRunner from './test_case_runner'\nimport { EventEmitter } from 'events'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport TestRunHookDefinition from '../models/test_run_hook_definition'\nimport { doesHaveValue, valueOrDefault } from '../value_checker'\nimport { ITestRunStopwatch, RealTestRunStopwatch } from './stopwatch'\nimport { assembleTestCases } from './assemble_test_cases'\n\nexport interface INewRuntimeOptions {\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  newId: IdGenerator.NewId\n  options: IRuntimeOptions\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport interface IRuntimeOptions {\n  dryRun: boolean\n  failFast: boolean\n  filterStacktraces: boolean\n  retry: number\n  retryTagFilter: string\n  strict: boolean\n  worldParameters: any\n}\n\nexport default class Runtime {\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: ITestRunStopwatch\n  private readonly newId: IdGenerator.NewId\n  private readonly options: IRuntimeOptions\n  private readonly pickleIds: string[]\n  private readonly stackTraceFilter: StackTraceFilter\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private success: boolean\n\n  constructor({\n    eventBroadcaster,\n    eventDataCollector,\n    newId,\n    options,\n    pickleIds,\n    supportCodeLibrary,\n  }: INewRuntimeOptions) {\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = new RealTestRunStopwatch()\n    this.newId = newId\n    this.options = options\n    this.pickleIds = pickleIds\n    this.stackTraceFilter = new StackTraceFilter()\n    this.supportCodeLibrary = supportCodeLibrary\n    this.success = true\n  }\n\n  async runTestRunHooks(\n    definitions: TestRunHookDefinition[],\n    name: string\n  ): Promise<void> {\n    if (this.options.dryRun) {\n      return\n    }\n    for (const hookDefinition of definitions) {\n      const { error } = await UserCodeRunner.run({\n        argsArray: [],\n        fn: hookDefinition.code,\n        thisArg: null,\n        timeoutInMilliseconds: valueOrDefault(\n          hookDefinition.options.timeout,\n          this.supportCodeLibrary.defaultTimeout\n        ),\n      })\n      if (doesHaveValue(error)) {\n        const location = formatLocation(hookDefinition)\n        throw new VError(\n          error,\n          `${name} hook errored, process exiting: ${location}`\n        )\n      }\n    }\n  }\n\n  async runTestCase(\n    pickleId: string,\n    testCase: messages.TestCase\n  ): Promise<void> {\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const testCaseRunner = new TestCaseRunner({\n      eventBroadcaster: this.eventBroadcaster,\n      stopwatch: this.stopwatch,\n      gherkinDocument: this.eventDataCollector.getGherkinDocument(pickle.uri),\n      newId: this.newId,\n      pickle,\n      testCase,\n      retries,\n      skip,\n      supportCodeLibrary: this.supportCodeLibrary,\n      worldParameters: this.options.worldParameters,\n    })\n    const status = await testCaseRunner.run()\n    if (shouldCauseFailure(status, this.options)) {\n      this.success = false\n    }\n  }\n\n  async start(): Promise<boolean> {\n    if (this.options.filterStacktraces) {\n      this.stackTraceFilter.filter()\n    }\n    const testRunStarted: messages.Envelope = {\n      testRunStarted: {\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testRunStarted)\n    this.stopwatch.start()\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.beforeTestRunHookDefinitions,\n      'a BeforeAll'\n    )\n    const assembledTestCases = await assembleTestCases({\n      eventBroadcaster: this.eventBroadcaster,\n      newId: this.newId,\n      pickles: this.pickleIds.map((pickleId) =>\n        this.eventDataCollector.getPickle(pickleId)\n      ),\n      supportCodeLibrary: this.supportCodeLibrary,\n    })\n    for (const pickleId of this.pickleIds) {\n      await this.runTestCase(pickleId, assembledTestCases[pickleId])\n    }\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.afterTestRunHookDefinitions.slice(0).reverse(),\n      'an AfterAll'\n    )\n    this.stopwatch.stop()\n    const testRunFinished: messages.Envelope = {\n      testRunFinished: {\n        timestamp: this.stopwatch.timestamp(),\n        success: this.success,\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testRunFinished)\n    if (this.options.filterStacktraces) {\n      this.stackTraceFilter.unfilter()\n    }\n    return this.success\n  }\n}\n"]}