"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("mz/fs"));
const path_1 = __importDefault(require("path"));
const string_argv_1 = __importDefault(require("string-argv"));
const value_checker_1 = require("../value_checker");
const DEFAULT_FILENAMES = ['cucumber.cjs', 'cucumber.js'];
class ProfileLoader {
    constructor(directory) {
        this.directory = directory;
    }
    async getDefinitions(configFile) {
        if (configFile) {
            return this.loadFile(configFile);
        }
        const defaultFile = DEFAULT_FILENAMES.find((filename) => fs_1.default.existsSync(path_1.default.join(this.directory, filename)));
        if (defaultFile) {
            return this.loadFile(defaultFile);
        }
        return {};
    }
    loadFile(configFile) {
        const definitionsFilePath = path_1.default.join(this.directory, configFile);
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const definitions = require(definitionsFilePath);
        if (typeof definitions !== 'object') {
            throw new Error(`${definitionsFilePath} does not export an object`);
        }
        return definitions;
    }
    async getArgv(profiles, configFile) {
        const definitions = await this.getDefinitions(configFile);
        if (profiles.length === 0 && value_checker_1.doesHaveValue(definitions.default)) {
            profiles = ['default'];
        }
        const argvs = profiles.map((profile) => {
            if (value_checker_1.doesNotHaveValue(definitions[profile])) {
                throw new Error(`Undefined profile: ${profile}`);
            }
            return string_argv_1.default(definitions[profile]);
        });
        return argvs.flat();
    }
}
exports.default = ProfileLoader;
//# sourceMappingURL=profile_loader.js.map